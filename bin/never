#!/usr/bin/env node

var path = require('path');

var optimist = require('optimist');
var v8socket = require('v8-socket');

var options = optimist(process.argv.slice(2))
    .usage(
        "$0 [options ...] script.js [script options ...]\n" +
        "$0 [options ...] --directory project_directory/"
    )
    .options({
        "directory": {
            usage: "Watch a directory, instead of launching a Node.js script",
            alias: "d",
            type: 'boolean',
            default: false
        },
        "port": {
            describe: "The port of the V8 debugger server",
            alias: "p",
            type: 'number',
            default: NaN
        },
        "host": {
            describe: "The host (IP address) of the server",
            alias: "h",
            type: 'string',
            default: 'localhost'
        }
    })
    .demand(1);

var argv = options.argv;

var watchPath;
if (argv["directory"]) {
    watchPath = path.resolve(argv._[0]);
} else {
    watchPath = process.cwd();
}

// NaN logic is because, eventually,
// we will need to find an unused port.
var port = isNaN(argv["port"]) ? 5858 : argv["port"];

var host = argv["host"];

function run() {
    console.log("Watching " + watchPath + " and pushing changes to v8://" + host + ":" + port);

    var socket = v8socket.connect(port, host);

    var watch = require('../lib/watch');
    var update = require('../lib/update');
    var queue = [ ];
    watch(watchPath, queue, function on_watchUpdate(filePath) {
        update.queueUpdateScripts(socket, queue);
    });
}

if (argv["directory"]) {
    run();
} else {
    var child_process = require('child_process');
    var child = child_process.spawn(
        process.argv[0], // Node
        [ '--debug=' + port ].concat(argv._)
    );

    var childAlive = true;

    child.stdin.pipe(process.stdin);
    child.stdout.pipe(process.stdout);
    child.on('exit', function on_exit(code) {
        childAlive = false;
        process.exit(code);
    });

    [ 'SIGINT' ].forEach(function (signal) {
        process.on(signal, function on_signal() {
            child.kill(signal);
        });
    });

    process.on('exit', function on_exit() {
        if (childAlive) {
            child.kill();
        }
    });

    setTimeout(run, 1000);
}
